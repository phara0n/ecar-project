version: '3.8'

services:
  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgbouncer:
    image: bitnami/pgbouncer:1.21.0
    container_name: ecar_pgbouncer
    restart: always
    ports:
      - "6432:6432"
    environment:
      - POSTGRESQL_HOST=db
      - POSTGRESQL_PORT=5432
      - POSTGRESQL_USERNAME=${DB_USER:-ecar_user}
      - POSTGRESQL_PASSWORD=${DB_PASSWORD:-ecar_password}
      - POSTGRESQL_DATABASE=${DB_NAME:-ecar_db}
      - PGBOUNCER_PORT=6432
      - PGBOUNCER_POOL_MODE=transaction
      - PGBOUNCER_MAX_CLIENT_CONN=100
      - PGBOUNCER_DEFAULT_POOL_SIZE=20
      - PGBOUNCER_AUTH_TYPE=trust
      - PGBOUNCER_DATABASE=${DB_NAME:-ecar_db}
      - PGBOUNCER_ADMIN_USERS=postgres,${DB_USER:-ecar_user}
      - PGBOUNCER_IGNORE_STARTUP_PARAMETERS=extra_float_digits
    depends_on:
      - db

  redis:
    image: redis:7.2-alpine
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build: ./backend
    command: >
      bash -c "/wait && 
      python manage.py migrate && 
      python manage.py runserver 0.0.0.0:8000"
    env_file:
      - ./.env
    environment:
      - WAIT_HOSTS=db:5432,redis:6379,pgbouncer:6432
      - WAIT_HOSTS_TIMEOUT=300
      - WAIT_SLEEP_INTERVAL=10
      - WAIT_HOST_CONNECT_TIMEOUT=30
      - REDIS_URL=redis://redis:6379/1
      - DB_HOST=pgbouncer
      - DB_PORT=6432
      - CONN_MAX_AGE=0
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      - db
      - redis
      - pgbouncer
    restart: always
    ports:
      - "8000:8000"

  nginx:
    image: nginx:1.25
    ports:
      - "80:80"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - static_volume:/static
      - media_volume:/media
    depends_on:
      - backend

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume: 