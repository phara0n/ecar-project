name: ECAR Backend CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_ecar_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        cd backend
        pip install -r requirements.txt
        
    - name: Run migrations
      run: |
        cd backend
        python manage.py migrate
      env:
        DJANGO_SETTINGS_MODULE: ecar_backend.settings
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_ecar_db
        REDIS_URL: redis://localhost:6379/1
        
    - name: Run tests
      run: |
        cd backend
        python manage.py test
      env:
        DJANGO_SETTINGS_MODULE: ecar_backend.settings
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_ecar_db
        REDIS_URL: redis://localhost:6379/1
  
  # Deploy job would be added here for production environment
  # deploy:
  #   needs: test
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main'
  #   steps:
  #   - uses: actions/checkout@v3
  #   
  #   - name: Deploy to production server
  #     uses: appleboy/ssh-action@master
  #     with:
  #       host: ${{ secrets.HOST }}
  #       username: ${{ secrets.USERNAME }}
  #       key: ${{ secrets.SSH_KEY }}
  #       script: |
  #         cd /path/to/deployment
  #         git pull
  #         docker-compose up -d --build 