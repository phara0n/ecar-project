import { baseApi } from './baseApi';

// Define invoice interface
interface Invoice {
  id: number;
  service: number;
  invoice_number: string;
  issue_date: string;
  due_date: string;
  subtotal: number;
  tax_rate: number;
  tax_amount: number;
  total: number;
  payment_status: 'pending' | 'paid' | 'overdue' | 'refunded' | 'partially_refunded';
  payment_date: string | null;
  payment_method: string | null;
  notes: string;
  created_at: string;
  updated_at: string;
}

// Define create/update invoice payload
interface InvoiceInput {
  service: number;
  invoice_number?: string; // Often auto-generated by backend
  issue_date: string;
  due_date: string;
  subtotal: number;
  tax_rate: number;
  notes?: string;
  payment_status?: 'pending' | 'paid' | 'overdue' | 'refunded' | 'partially_refunded';
  payment_date?: string;
  payment_method?: string;
}

// Define refund payload
interface RefundInput {
  amount: number;
  reason: string;
  refund_method: string;
}

// Define query params for filtering
interface InvoiceQueryParams {
  service?: number;
  customer?: number; // May be supported to find invoices by customer
  payment_status?: string;
  start_date?: string;
  end_date?: string;
  min_amount?: number;
  max_amount?: number;
  search?: string;
  page?: number;
  page_size?: number;
}

// Define paginated response from backend
interface PaginatedInvoicesResponse {
  count: number;
  next: string | null;
  previous: string | null;
  results: Invoice[];
}

// Create invoice API slice
export const invoiceApi = baseApi.injectEndpoints({
  endpoints: (builder) => ({
    // Get all invoices with pagination and filtering
    getInvoices: builder.query<PaginatedInvoicesResponse, InvoiceQueryParams | void>({
      query: (params = {}) => ({
        url: 'invoices/',
        params,
      }),
      providesTags: (result) => 
        result
          ? [
              ...result.results.map(({ id }) => ({ type: 'Invoices' as const, id })),
              { type: 'Invoices', id: 'LIST' },
            ]
          : [{ type: 'Invoices', id: 'LIST' }],
    }),

    // Get a single invoice by ID
    getInvoiceById: builder.query<Invoice, number>({
      query: (id) => `invoices/${id}/`,
      providesTags: (result, error, id) => [{ type: 'Invoices', id }],
    }),

    // Get invoices for a specific service
    getInvoicesByService: builder.query<Invoice[], number>({
      query: (serviceId) => ({
        url: 'invoices/',
        params: { service: serviceId },
      }),
      transformResponse: (response: PaginatedInvoicesResponse) => response.results,
      providesTags: (result) => 
        result
          ? [
              ...result.map(({ id }) => ({ type: 'Invoices' as const, id })),
              { type: 'Invoices', id: 'LIST' },
            ]
          : [{ type: 'Invoices', id: 'LIST' }],
    }),

    // Create a new invoice
    createInvoice: builder.mutation<Invoice, InvoiceInput>({
      query: (data) => ({
        url: 'invoices/',
        method: 'POST',
        body: data,
      }),
      invalidatesTags: [
        { type: 'Invoices', id: 'LIST' },
        { type: 'Services', id: 'LIST' }
      ],
    }),

    // Update an existing invoice
    updateInvoice: builder.mutation<Invoice, { id: number; data: InvoiceInput }>({
      query: ({ id, data }) => ({
        url: `invoices/${id}/`,
        method: 'PUT',
        body: data,
      }),
      invalidatesTags: (result, error, { id }) => [
        { type: 'Invoices', id },
        { type: 'Invoices', id: 'LIST' },
        { type: 'Services', id: 'LIST' }
      ],
    }),

    // Delete an invoice
    deleteInvoice: builder.mutation<void, number>({
      query: (id) => ({
        url: `invoices/${id}/`,
        method: 'DELETE',
      }),
      invalidatesTags: (result, error, id) => [
        { type: 'Invoices', id },
        { type: 'Invoices', id: 'LIST' },
        { type: 'Services', id: 'LIST' }
      ],
    }),

    // Process a refund for an invoice
    refundInvoice: builder.mutation<any, { id: number; data: RefundInput }>({
      query: ({ id, data }) => ({
        url: `invoices/${id}/refund/`,
        method: 'POST',
        body: data,
      }),
      invalidatesTags: (result, error, { id }) => [
        { type: 'Invoices', id },
        { type: 'Invoices', id: 'LIST' }
      ],
    }),
  }),
});

// Export hooks for use in components
export const {
  useGetInvoicesQuery,
  useGetInvoiceByIdQuery,
  useGetInvoicesByServiceQuery,
  useCreateInvoiceMutation,
  useUpdateInvoiceMutation,
  useDeleteInvoiceMutation,
  useRefundInvoiceMutation,
} = invoiceApi; 